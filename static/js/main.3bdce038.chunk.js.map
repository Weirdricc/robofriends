{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","rootReducer.js","store.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","style","fontSize","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onFetchRobots","searchField","onSearchChange","loading","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobotsReducer","fetchRobotsReducer","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3bdce038.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = props => {\r\n  const { name, email, id } = props;\r\n  return (\r\n    <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robot photos' />\r\n      <div style={{ fontSize: '10px' }}>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  // throw error for catch\r\n  // if (false) {\r\n  //     throw new Error('NOOOOO!');\r\n  // }\r\n\r\n  return robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type='text' \r\n            placeholder='search robots'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid #96CCFF', height: '350px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1 className='tc f1 light-blue' >Oops... Something went wrong!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, fetchRobots } from '../actions';\r\n// import { robots } from '../robots';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobotsReducer.searchField,\r\n        robots: state.fetchRobotsReducer.robots,\r\n        loading: state.fetchRobotsReducer.loading,\r\n        error: state.fetchRobotsReducer.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onFetchRobots: () => dispatch(fetchRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchRobots();\r\n    }\r\n\r\n    render() {\r\n\r\n        const { searchField, onSearchChange, robots, loading } = this.props\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return (\r\n            //  todo note: remove the robot.length later\r\n            loading\r\n            // loading || !robots.length\r\n            ? <h1 className='tc f1 light-blue' style={{'fontFamily': 'monospace', 'fontStyle':'italic'}}>loading...</h1>\r\n            : (\r\n                <div className='tc'>\r\n                    <h3 className='f3 light-blue' >Robofriends</h3>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={ filteredRobots } />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App)\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  FETCH_ROBOTS_REQUEST,\r\n  FETCH_ROBOTS_SUCCESS,\r\n  FETCH_ROBOTS_FAILURE,\r\n} from './constants.js';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\n// export const fetchRobotsRequest = () => {\r\n//     return {\r\n//         type: FETCH_ROBOTS_REQUEST\r\n//     }\r\n// }\r\n\r\n// export const fetchRobotsSuccess = users => {\r\n//     return {\r\n//         type: FETCH_ROBOTS_SUCCESS,\r\n//         payload: users\r\n//     }\r\n// }\r\n\r\n// export const fetchRobotsFailure = error => {\r\n//     return {\r\n//         type: FETCH_ROBOTS_FAILURE,\r\n//         payload: error\r\n//     }\r\n// }\r\n\r\n// ? export const fetchRobots = () => dispatch => {\r\n//     dispatch(fetchRobotsRequest);\r\n//     fetch('https://jsonplaceholder.typicode.com/users')\r\n//         .then(response => {\r\n//             const jsonResponse = response.json()\r\n//             dispatch(fetchRobotsSuccess(jsonResponse))\r\n//         })\r\n//         .catch(error => {\r\n//             const errMsg = error.message\r\n//             dispatch(fetchRobotsFailure(errMsg))\r\n//         })\r\n// }\r\n\r\nexport const fetchRobots = () => dispatch => {\r\n  dispatch({ type: FETCH_ROBOTS_REQUEST });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: FETCH_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: FETCH_ROBOTS_FAILURE, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const FETCH_ROBOTS_REQUEST = 'FETCH_ROBOTS_REQUEST';\r\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\r\nexport const FETCH_ROBOTS_FAILURE = 'FETCH_ROBOTS_FAILURE';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD, \r\n    FETCH_ROBOTS_REQUEST, \r\n    FETCH_ROBOTS_SUCCESS, \r\n    FETCH_ROBOTS_FAILURE, \r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobotsReducer = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign({}, state, { searchField: action.payload });\r\n\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    loading: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const fetchRobotsReducer = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case FETCH_ROBOTS_REQUEST:\r\n            return Object.assign({}, state, { loading: true });\r\n\r\n        case FETCH_ROBOTS_SUCCESS: \r\n            return Object.assign({}, state, { robots: action.payload, loading: false });\r\n\r\n        case FETCH_ROBOTS_FAILURE:\r\n            return Object.assign({}, state, { error: action.payload, loading: false });\r\n\r\n        default: return state\r\n    }\r\n}\r\n","import { searchRobotsReducer, fetchRobotsReducer } from './reducers';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport const rootReducer = combineReducers({ searchRobotsReducer, fetchRobotsReducer });","import { createStore, applyMiddleware } from 'redux'\r\nimport { rootReducer } from './rootReducer';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware( thunkMiddleware, logger));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}